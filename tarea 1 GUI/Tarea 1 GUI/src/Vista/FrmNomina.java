package Vista;

import Modelo.TBModeloNomina;
import javax.swing.JOptionPane;

/**
 *
 * @author omar
 */
public class FrmNomina extends javax.swing.JFrame {

    public TBModeloNomina modelo = new TBModeloNomina();

    /**
     * Creates new form FrmNomina
     */
    public FrmNomina() {
        initComponents();
        iniciaTabla();
    }

    public void iniciaTabla() {
        modelo.inicializaTabla(tbEmpleados);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEmpleados = new javax.swing.JTable();
        btnSalir = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuBonificaciones = new javax.swing.JMenu();
        menuItemAsalariado = new javax.swing.JMenuItem();
        menuItemPorHoras = new javax.swing.JMenuItem();
        menuItemPorComision = new javax.swing.JMenuItem();
        menuItemBaseMasComision = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Nomina de Empleados");

        tbEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbEmpleados);
        if (tbEmpleados.getColumnModel().getColumnCount() > 0) {
            tbEmpleados.getColumnModel().getColumn(0).setResizable(false);
            tbEmpleados.getColumnModel().getColumn(1).setResizable(false);
            tbEmpleados.getColumnModel().getColumn(2).setResizable(false);
            tbEmpleados.getColumnModel().getColumn(3).setResizable(false);
        }

        btnSalir.setText("Salir");
        btnSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSalirMouseClicked(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnActualizarMouseClicked(evt);
            }
        });

        menuBonificaciones.setText("Bonificaciones");

        menuItemAsalariado.setText("Asalariado");
        menuItemAsalariado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAsalariadoActionPerformed(evt);
            }
        });
        menuBonificaciones.add(menuItemAsalariado);

        menuItemPorHoras.setText("Por Horas");
        menuItemPorHoras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPorHorasActionPerformed(evt);
            }
        });
        menuBonificaciones.add(menuItemPorHoras);

        menuItemPorComision.setText("Por Comision");
        menuItemPorComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPorComisionActionPerformed(evt);
            }
        });
        menuBonificaciones.add(menuItemPorComision);

        menuItemBaseMasComision.setText("Base Mas Comision");
        menuItemBaseMasComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBaseMasComisionActionPerformed(evt);
            }
        });
        menuBonificaciones.add(menuItemBaseMasComision);

        jMenuBar1.add(menuBonificaciones);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(btnActualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addGap(67, 67, 67))
            .addGroup(layout.createSequentialGroup()
                .addGap(181, 181, 181)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizar)
                    .addComponent(btnSalir))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirMouseClicked

    private void btnActualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnActualizarMouseClicked
        // TODO add your handling code here:
        iniciaTabla();
    }//GEN-LAST:event_btnActualizarMouseClicked

    private void menuItemAsalariadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAsalariadoActionPerformed
        // TODO add your handling code here:
        String porcentajeStr = JOptionPane.showInputDialog(this, "Ingrese el porcentaje de incremento para empleados asalariados:");
        if (porcentajeStr != null) { // Si el usuario no canceló
            try {
                double porcentaje = Double.parseDouble(porcentajeStr);
                modelo.bonificaciones("Asalariado", porcentaje);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Porcentaje no válido. Por favor, ingrese un número.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemAsalariadoActionPerformed

    private void menuItemPorHorasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPorHorasActionPerformed
        // TODO add your handling code here:
        String porcentajeStr = JOptionPane.showInputDialog(this, "Ingrese el porcentaje de incremento para empleados por horas:");
        if (porcentajeStr != null) { // Si el usuario no canceló
            try {
                double porcentaje = Double.parseDouble(porcentajeStr);
                modelo.bonificaciones("PorHoras", porcentaje);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Porcentaje no válido. Por favor, ingrese un número.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemPorHorasActionPerformed

    private void menuItemPorComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPorComisionActionPerformed
        // TODO add your handling code here:
        String porcentajeStr = JOptionPane.showInputDialog(this, "Ingrese el porcentaje de incremento para empleados por comisión:");
        if (porcentajeStr != null) { // Si el usuario no canceló
            try {
                double porcentaje = Double.parseDouble(porcentajeStr);
                modelo.bonificaciones("PorComision", porcentaje);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Porcentaje no válido. Por favor, ingrese un número.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemPorComisionActionPerformed

    private void menuItemBaseMasComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBaseMasComisionActionPerformed
        // TODO add your handling code here:
        String porcentajeStr = JOptionPane.showInputDialog(this, "Ingrese el porcentaje de incremento para empleados con base más comisión:");
        if (porcentajeStr != null) { // Si el usuario no canceló
            try {
                double porcentaje = Double.parseDouble(porcentajeStr);
                modelo.bonificaciones("BaseMasComision", porcentaje);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Porcentaje no válido. Por favor, ingrese un número.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemBaseMasComisionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuBonificaciones;
    private javax.swing.JMenuItem menuItemAsalariado;
    private javax.swing.JMenuItem menuItemBaseMasComision;
    private javax.swing.JMenuItem menuItemPorComision;
    private javax.swing.JMenuItem menuItemPorHoras;
    private javax.swing.JTable tbEmpleados;
    // End of variables declaration//GEN-END:variables
}
